package edu.isel.pdm.memorymatrix.game.history

import androidx.room.Database
import androidx.room.RoomDatabase
import androidx.room.TypeConverter
import androidx.room.TypeConverters
import edu.isel.pdm.memorymatrix.game.data.Position
import java.util.*

/**
 * Specifies the contract to be supported by the History DB to be automatically generated by
 * Room build tools.
 */
@Database(entities = [GameResult::class], version = 1)
@TypeConverters(Converters::class)
abstract class HistoryDatabase : RoomDatabase() {
    /**
     * Gets the [GameResult] entity's DAO
     */
    abstract fun getGameResultsDao(): GameResultDao
}

/**
 * Contains functions for converting between in memory data types and their DB counterparts.
 */
class Converters {

    @TypeConverter
    fun fromTimestamp(value: Long) = Date(value)

    @TypeConverter
    fun dateToTimestamp(date: Date) = date.time

    @TypeConverter
    fun patternToString(pattern: List<Position>): String =
        pattern.fold(StringBuilder()) { acc, position ->
            acc.append("${position.x},${position.y};")
        }.toString()

    @TypeConverter
    fun patternFromString(stringPattern: String): List<Position> =
        stringPattern.split(';')
            .filter { it.isNotBlank() }
            .map {
                val pair = it.split(',')
                Position(pair[0].toInt(), pair[1].toInt())
            }
}